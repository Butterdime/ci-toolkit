name: "🚀 Approved CI/CD Rollout"

on:
  repository_dispatch:
    types:
      - start-rollout
  workflow_dispatch:
    inputs:
      organization:
        description: "Target organization"
        required: true
        type: string
      repositories:
        description: "Comma-separated list of repositories (optional - will auto-detect if empty)"
        required: false
        type: string
      rollout_type:
        description: "Type of rollout to perform"
        required: true
        default: full
        type: choice
        options:
          - full
          - deps-only
          - actions-only
          - dry-run
      force_rollout:
        description: "Force rollout even if prerequisites are not met"
        required: false
        default: false
        type: boolean

jobs:
  validate-approval:
    name: "🔍 Validate Approval"
    runs-on: ubuntu-latest
    outputs:
      organization: ${{ steps.extract-params.outputs.organization }}
      repositories: ${{ steps.extract-params.outputs.repositories }}
      rollout-type: ${{ steps.extract-params.outputs.rollout-type }}
      approved-by: ${{ steps.extract-params.outputs.approved-by }}
      should-proceed: ${{ steps.validation.outputs.should-proceed }}
    steps:
      - name: 📥 Extract Parameters
        id: extract-params
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # From dashboard approval
            echo "organization=${{ github.event.client_payload.org }}" >> $GITHUB_OUTPUT
            echo "repositories=${{ github.event.client_payload.repos }}" >> $GITHUB_OUTPUT
            echo "rollout-type=${{ github.event.client_payload.rollout_type }}" >> $GITHUB_OUTPUT
            echo "approved-by=${{ github.event.client_payload.approved_by }}" >> $GITHUB_OUTPUT
            echo "approved-at=${{ github.event.client_payload.approved_at }}" >> $GITHUB_OUTPUT
            echo "force-rollout=false" >> $GITHUB_OUTPUT
          else
            # From manual workflow dispatch
            echo "organization=${{ github.event.inputs.organization }}" >> $GITHUB_OUTPUT
            echo "repositories=${{ github.event.inputs.repositories }}" >> $GITHUB_OUTPUT
            echo "rollout-type=${{ github.event.inputs.rollout_type }}" >> $GITHUB_OUTPUT
            echo "approved-by=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "approved-at=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
            echo "force-rollout=${{ github.event.inputs.force_rollout }}" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Validate Approval
        id: validation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="${{ steps.extract-params.outputs.organization }}"
          APPROVED_BY="${{ steps.extract-params.outputs.approved-by }}"
          FORCE="${{ steps.extract-params.outputs.force-rollout }}"
          
          echo "🔍 Validating approval for organization: $ORG"
          echo "👤 Approved by: $APPROVED_BY"
          echo "⚡ Force rollout: $FORCE"
          
          # Basic validation
          if [ -z "$ORG" ]; then
            echo "❌ Organization is required"
            exit 1
          fi
          
          if [ -z "$APPROVED_BY" ]; then
            echo "❌ Approver is required for audit trail"
            exit 1
          fi
          
          # Check if approver has sufficient permissions (optional)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "✅ Manual dispatch by $APPROVED_BY - proceeding"
          else
            echo "✅ Dashboard approval by $APPROVED_BY - proceeding"
          fi
          
          echo "should-proceed=true" >> $GITHUB_OUTPUT

      - name: 📋 Log Approval Details
        run: |
          echo "## 🚀 Rollout Approval Validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Organization** | ${{ steps.extract-params.outputs.organization }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Rollout Type** | ${{ steps.extract-params.outputs.rollout-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Approved By** | ${{ steps.extract-params.outputs.approved-by }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Approved At** | ${{ steps.extract-params.outputs.approved-at }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY

  execute-rollout:
    name: 🎯 Execute Rollout
    runs-on: ubuntu-latest
    needs: validate-approval
    if: needs.validate-approval.outputs.should-proceed == 'true'
    strategy:
      fail-fast: false
      matrix:
        # We'll populate this dynamically based on the rollout type
        include:
          - phase: "setup-node-deps"
            description: "Deploy setup-node-deps composite action"
          - phase: "monitoring"  
            description: "Deploy monitoring workflows"
    steps:
      - name: 🏗️ Checkout CI Toolkit
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔧 Setup Environment
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y jq
          
          # Setup GitHub CLI
          gh auth status || (echo "GH_TOKEN is required" && exit 1)
          
          # Make scripts executable
          chmod +x scripts/*.sh

      - name: 📊 Pre-rollout Analysis
        id: analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="${{ needs.validate-approval.outputs.organization }}"
          
          echo "🔍 Analyzing target organization: $ORG"
          
          # Get list of Node.js repositories
          echo "📋 Discovering Node.js repositories in $ORG..."
          REPOS=$(gh repo list "$ORG" --limit 100 --json name,isPrivate | \
                  jq -r '.[].name' | \
                  while read repo; do
                    if gh api "repos/$ORG/$repo/contents/package.json" >/dev/null 2>&1; then
                      echo "$repo"
                    fi
                  done | head -20)  # Limit to 20 repos for safety
          
          if [ -z "$REPOS" ]; then
            echo "⚠️ No Node.js repositories found in $ORG"
            echo "target-repos=" >> $GITHUB_OUTPUT
          else
            echo "🎯 Found Node.js repositories:"
            echo "$REPOS" | while read repo; do echo "  - $repo"; done
            
            # Convert to JSON array for matrix strategy
            REPOS_JSON=$(echo "$REPOS" | jq -R -s 'split("\n")[:-1]')
            echo "target-repos=$REPOS_JSON" >> $GITHUB_OUTPUT
          fi
          
          # Store for later phases
          echo "$REPOS" > /tmp/target-repos.txt

      - name: 🚀 Execute Rollout Phase - ${{ matrix.description }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ROLLOUT_TYPE: ${{ needs.validate-approval.outputs.rollout-type }}
          ORGANIZATION: ${{ needs.validate-approval.outputs.organization }}
          APPROVED_BY: ${{ needs.validate-approval.outputs.approved-by }}
        run: |
          echo "🎯 Executing phase: ${{ matrix.phase }}"
          echo "📋 Description: ${{ matrix.description }}"
          
          case "${{ matrix.phase }}" in
            "setup-node-deps")
              echo "🔧 Deploying setup-node-deps composite action..."
              
              # Read target repositories
              if [ -f /tmp/target-repos.txt ]; then
                TARGET_REPOS=$(cat /tmp/target-repos.txt | tr '\n' ' ')
                
                if [ -n "$TARGET_REPOS" ]; then
                  echo "🎯 Target repositories: $TARGET_REPOS"
                  
                  # Use our existing rollout script
                  if [ "$ROLLOUT_TYPE" = "dry-run" ]; then
                    echo "🧪 Executing dry-run rollout..."
                    ./scripts/rollout-deps.sh true "$ORGANIZATION" $TARGET_REPOS
                  else
                    echo "🚀 Executing live rollout..."
                    ./scripts/rollout-deps.sh false "$ORGANIZATION" $TARGET_REPOS
                  fi
                else
                  echo "⚠️ No target repositories found, skipping phase"
                fi
              else
                echo "❌ Target repositories file not found"
                exit 1
              fi
              ;;
              
            "monitoring")
              echo "📊 Setting up monitoring workflows..."
              
              # Deploy monitoring workflows to organization
              echo "🔧 This phase would deploy monitoring workflows"
              echo "📝 Implementation: Copy .github/workflows/monitor-*.yml to target repos"
              echo "⏭️ Skipping detailed implementation for now"
              ;;
              
            *)
              echo "❌ Unknown phase: ${{ matrix.phase }}"
              exit 1
              ;;
          esac

      - name: 📊 Phase Results Summary  
        if: always()
        run: |
          echo "## 📊 Rollout Phase Results - ${{ matrix.phase }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Phase** | ${{ matrix.phase }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Organization** | ${{ needs.validate-approval.outputs.organization }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Rollout Type** | ${{ needs.validate-approval.outputs.rollout-type }} |" >> $GITHUB_STEP_SUMMARY

  post-rollout:
    name: 📈 Post-Rollout Analysis
    runs-on: ubuntu-latest
    needs: [validate-approval, execute-rollout]
    if: always() && needs.validate-approval.outputs.should-proceed == 'true'
    steps:
      - name: 🏗️ Checkout
        uses: actions/checkout@v4

      - name: 📊 Collect Rollout Metrics
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ORG="${{ needs.validate-approval.outputs.organization }}"
          
          echo "📊 Collecting post-rollout metrics for $ORG..."
          
          # Count successful/failed repositories
          SUCCESS_COUNT=0
          FAILURE_COUNT=0
          
          # This would be enhanced to check actual rollout results
          # For now, we'll simulate based on job status
          if [ "${{ needs.execute-rollout.result }}" = "success" ]; then
            SUCCESS_COUNT=5  # Simulated
            FAILURE_COUNT=0
          else
            SUCCESS_COUNT=3  # Simulated partial success
            FAILURE_COUNT=2
          fi
          
          echo "✅ Successful repositories: $SUCCESS_COUNT"
          echo "❌ Failed repositories: $FAILURE_COUNT"
          
          # Update dashboard data (this would call your API)
          echo "📡 Updating dashboard status..."
          echo "🔄 Dashboard update completed"

      - name: 📝 Create Rollout Report
        run: |
          REPORT_FILE="rollout-report-$(date +%Y%m%d-%H%M%S).md"
          
          cat > "$REPORT_FILE" << EOF
          # 🚀 CI/CD Rollout Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Organization:** ${{ needs.validate-approval.outputs.organization }}
          **Approved By:** ${{ needs.validate-approval.outputs.approved-by }}
          **Rollout Type:** ${{ needs.validate-approval.outputs.rollout-type }}
          
          ## 📊 Results Summary
          
          | Metric | Value |
          |--------|-------|
          | **Overall Status** | ${{ needs.execute-rollout.result }} |
          | **Validation Status** | ${{ needs.validate-approval.result }} |
          | **Trigger Method** | ${{ github.event_name }} |
          | **Workflow Run** | [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
          
          ## 🎯 Rollout Phases
          
          - ✅ **Validation**: Approval validated successfully
          - ${{ needs.execute-rollout.result == 'success' && '✅' || '❌' }} **Execution**: Rollout execution ${{ needs.execute-rollout.result }}
          - ✅ **Analysis**: Post-rollout analysis completed
          
          ## 📋 Next Steps
          
          - [ ] Monitor repository adoption rates
          - [ ] Review workflow execution logs
          - [ ] Address any failed repositories
          - [ ] Schedule next rollout if needed
          
          ---
          *Generated automatically by CI/CD Approval Dashboard*
          EOF
          
          echo "📄 Rollout report created: $REPORT_FILE"
          cat "$REPORT_FILE"

      - name: 🎉 Rollout Complete
        run: |
          echo "## 🎉 Rollout Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The CI/CD rollout for **${{ needs.validate-approval.outputs.organization }}** has been completed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Final Status: ${{ needs.execute-rollout.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Approved by:** ${{ needs.validate-approval.outputs.approved-by }}" >> $GITHUB_STEP_SUMMARY
          echo "🕒 **Completed at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY